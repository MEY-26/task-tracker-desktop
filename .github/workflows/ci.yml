name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  frontend-tests:
    name: frontend-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build:ui

  code-quality:
    name: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  backend-tests:
    name: backend-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none
          extensions: mbstring, tokenizer, sqlite3, pdo_sqlite
      - name: Install Composer deps
        working-directory: task-tracker-api
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --ignore-platform-reqs
      - name: Create database directory
        working-directory: task-tracker-api
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Prepare env
        working-directory: task-tracker-api
        run: |
          # Copy .env.example to .env first
          cp .env.example .env || echo "No .env.example found, creating new .env"
          
          # Create minimal .env for testing
          cat > .env << 'EOF'
          APP_NAME=TaskTracker
          APP_ENV=testing
          APP_KEY=
          APP_DEBUG=true
          APP_URL=http://localhost
          
          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug
          
          DB_CONNECTION=sqlite
          DB_DATABASE=database/database.sqlite
          
          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          
          MEMCACHED_HOST=127.0.0.1
          
          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379
          
          MAIL_MAILER=smtp
          MAIL_HOST=mailpit
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"
          
          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false
          
          PUSHER_APP_ID=
          PUSHER_APP_KEY=
          PUSHER_APP_SECRET=
          PUSHER_HOST=
          PUSHER_PORT=443
          PUSHER_SCHEME=https
          PUSHER_APP_CLUSTER=mt1
          
          VITE_APP_NAME="${APP_NAME}"
          VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
          VITE_PUSHER_HOST="${PUSHER_HOST}"
          VITE_PUSHER_PORT="${PUSHER_PORT}"
          VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
          VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
          EOF
          
          # Clear all caches first
          php artisan config:clear || true
          php artisan cache:clear || true
          php artisan route:clear || true
          php artisan view:clear || true
      - name: Generate application key
        working-directory: task-tracker-api
        run: php artisan key:generate --force -vvv
      - name: Run migrations
        working-directory: task-tracker-api
        run: php artisan migrate --force -vvv
      - name: Run tests
        working-directory: task-tracker-api
        run: php artisan test --no-ansi -vvv

  security-scan:
    name: security-scan
    runs-on: ubuntu-latest
    continue-on-error: true  # raporla ama pipeline'Ä± bloklama
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: npm audit (prod, high+)
        run: |
          npm audit --omit=dev --audit-level=high || true
      - name: Composer audit
        working-directory: task-tracker-api
        run: composer audit || true

  build-electron:
    name: build-electron
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    needs: [frontend-tests, backend-tests, code-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - run: npm run build:ui
      - name: Build (dir only)
        run: npx electron-builder --dir
      - uses: actions/upload-artifact@v4
        with:
          name: electron-dir-${{ github.ref_name }}
          path: release/**

