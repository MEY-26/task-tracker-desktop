name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build:ui
      
    - name: Run tests (if available)
      run: npm test --if-present

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: task_tracker_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, phar, tokenizer, xml, curl
        coverage: none
        
    - name: Setup Composer
      uses: ramsey/composer-install@v2
      with:
        working-directory: ./task-tracker-api
        
    - name: Copy environment file
      run: |
        cd task-tracker-api
        cp env.example .env
        php artisan key:generate
        
    - name: Configure database
      run: |
        cd task-tracker-api
        php artisan config:cache
        php artisan migrate --force
        
    - name: Run tests
      run: |
        cd task-tracker-api
        php artisan test

  # Build Electron App
  build-electron:
    needs: [frontend-tests, backend-tests]
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build:ui
      
    - name: Build Electron app
      run: |
        if [ "$RUNNER_OS" = "Windows" ]; then
          npm run build:win
        elif [ "$RUNNER_OS" = "macOS" ]; then
          npm run build:mac
        else
          npm run build:linux
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: task-tracker-${{ runner.os }}
        path: release/

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run code quality checks
      run: |
        npm run lint
        npm audit --audit-level=moderate
